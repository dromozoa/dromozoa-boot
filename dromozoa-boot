#! /bin/sh -e

# Copyright (C) 2016-2018 Tomoyuki Fujimori <moyu@dromozoa.com>
#
# This file is part of dromozoa-boot.
#
# dromozoa-boot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# dromozoa-boot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with dromozoa-boot.  If not, see <http://www.gnu.org/licenses/>.

if (unset CDPATH) >/dev/null 2>&1
then
  unset CDPATH
fi

dromozoa_basename() {
  expr "x$1" : 'x.*/\([^/][^/]*\)/*$' \
    '|' "x$1" : 'x\(//\)$' \
    '|' "x$1" : 'x\(/\)' \
    '|' "x$1" : 'x\(.*\)'
}

dromozoa_dirname() {
  expr "x$1" : 'x\(.*[^/]\)//*[^/][^/]*/*$' \
    '|' "x$1" : 'x\(//\)[^/]' \
    '|' "x$1" : 'x\(//\)$' \
    '|' "x$1" : 'x\(/\)' \
    '|' .
}

dromozoa_search() {
  path=:$PATH
  while :
  do
    i=`expr "x$path" : 'x:\([^:]*\)' '|' .`
    for j in "$@"
    do
      if test -x "$i/$j"
      then
        i=`(cd "$i" && pwd)`
        echo "$i/$j"
        return
      fi
    done
    if expr "x$path" : 'x:[^:]*$' >/dev/null 2>&1
    then
      return
    fi
    path=`expr "x$path" : 'x:[^:]*\(.*\)'`
  done
}

dromozoa_version_lua() {
  name=_dromozoa_version_lua
  cat <<EOH >"$name.c"
#include <stdio.h>
#include <lua.h>

int main(int ac, char* av[]) {
  const char* p = LUA_RELEASE;
  if (*p++ != 'L') { return 1; }
  if (*p++ != 'u') { return 1; }
  if (*p++ != 'a') { return 1; }
  if (*p++ != ' ') { return 1; }
  printf("%s\n", p);
  return 0;
}
EOH
  if gcc $CPPFLAGS $LDFLAGS -g -O2 "$name.c" -llua -o "$name" >/dev/null 2>&1
  then
    "./$name"
  fi
}

dromozoa_version_zeromq() {
  name=_dromozoa_version_zeromq
  cat <<EOH >"$name.c"
#include <stdio.h>
#include <zmq.h>

int main(int ac, char* av[]) {
  int major = 0;
  int minor = 0;
  int patch = 0;
  zmq_version(&major, &minor, &patch);
  printf("%d.%d.%d\n", major, minor, patch);
  return 0;
}
EOH
  if gcc $CPPFLAGS $LDFLAGS -g -O2 "$name.c" -lzmq -o "$name" >/dev/null 2>&1
  then
    "./$name"
  fi
}

dromozoa_version() {
  case x$1 in
    xlua)
      dromozoa_version_lua;;
    xscreen)
      result=`"$@" 2>&1 || :`
      result=`expr "x$result" : 'x.* version \([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\)' '|' x`
      case x$result in
        x) ;;
        *)
          major=`expr "x$result" : 'x\([0-9][0-9]*\)'`
          minor=`expr "x$result" : 'x[0-9][0-9]*\.\([0-9][0-9]*\)'`
          patch=`expr "x$result" : 'x[0-9][0-9]*\.[0-9][0-9]*\.\([0-9][0-9]*\)'`
          printf '%d.%d.%d' "$major" "$minor" "$patch";;
      esac;;
    xvim)
      if "$@" >/dev/null 2>&1
      then
        result=`"$@" 2>&1 | sed -n -e 1p`
        version=`expr "x$result" : 'x.* \([0-9][0-9]*\.[0-9.]*\)' || :`
        result=`"$@" 2>&1 | sed -n -e '/^Included patches:/p'`
        patch=`expr "x$result" : 'x.*[^0-9]\([0-9][0-9]*\)$' || :`
        echo "$version.$patch"
      fi;;
    xzeromq)
      dromozoa_version_zeromq;;
    *)
      if "$@" >/dev/null 2>&1
      then
        result=`"$@" 2>&1`
        result=`expr "x$result" : 'x.*[ v]\([0-9][0-9]*\.[0-9.]*\)' '|' 'x'`
        case x$result in
          x) ;;
          *) echo "$result";;
        esac
      fi;;
  esac
}

dromozoa_package_version_lua51() {
  echo 5.1.5
}

dromozoa_package_version_lua52() {
  echo 5.2.4
}

dromozoa_package_version_lua53() {
  echo 5.3.4
}

dromozoa_package_version_luajit() {
  echo 2.0.5
}

dromozoa_package_version_luarocks() {
  echo 2.4.4
}

dromozoa_package_version_vim() {
  echo 8.0.1616
}

dromozoa_package_version_autoconf() {
  echo 2.69
}

dromozoa_package_version_automake() {
  echo 1.16.1
}

dromozoa_package_version_libtool() {
  echo 2.4.6
}

dromozoa_package_version_screen() {
  echo 4.6.2
}

dromozoa_package_version_tig() {
  echo 2.3.3
}

dromozoa_package_version_zeromq() {
  echo 4.2.3
}

command=install
insecure=false
prefix=
while :
do
  case x$# in
    x0) break;;
  esac
  case x$1 in
    x-help|x-hel|x-he|x-h|x--help|x--hel|x--he|x--h)
      shift; command=help;;
    x-list|x-lis|x-li|x-l|x--list|x--lis|x--li|x--l)
      shift; command=list;;
    x-k|x--insecure)
      shift; insecure=true;;
    x-prefix|x-prefi|x-pref|x-pre|x-pr|x-p|x--prefix|x--prefi|x--pref|x--pre|x--pr|x--p)
      case x$# in
        x1) echo "missing argument to $1" >&2; exit 1;;
      esac
      shift; prefix=$1; shift;;
    x--prefix=*|x--prefi=*|x--pref=*|x--pre=*|x--pr=*|x--p=*)
      prefix=`expr "x$1" : 'x--p[^=]*=\(.*\)'`; shift;;
    x--)
      shift; break;;
    x-*)
      echo "unrecognized option $1" >&2; exit 1;;
    *)
      break;;
  esac
done

case x$command in
  xhelp)
    cat <<EOH
$0 --help
$0 --list
$0 [--insecure] --prefix=PREFIX PACKAGE...
EOH
    exit;;
  xlist)
    for package in lua51 lua52 lua53 luajit luarocks vim autoconf automake libtool screen tig zeromq
    do
      package_version=`"dromozoa_package_version_$package"`
      echo "$package $package_version"
    done
    exit;;
esac

case x$prefix in
  x) echo "prefix is unset or null" >&2; exit 1;;
esac
mkdir -p "$prefix"
prefix=`(cd "$prefix" && pwd)`

case x$PATH in
  x) PATH=$prefix/bin:/usr/bin:/bin:/usr/sbin:/sbin;;
  *) PATH=$prefix/bin:$PATH;;
esac
case x$CPPFLAGS in
  x) CPPFLAGS="-I$prefix/include";;
  *) CPPFLAGS="-I$prefix/include $CPPFLAGS";;
esac
case x`uname` in
  xDarwin)
    case x$LDFLAGS in
      x) LDFLAGS="-L$prefix/lib";;
      *) LDFLAGS="-L$prefix/lib $LDFLAGS";;
    esac;;
  *)
    case x$LDFLAGS in
      x) LDFLAGS="-L$prefix/lib -Wl,-rpath -Wl,$prefix/lib";;
      *) LDFLAGS="-L$prefix/lib -Wl,-rpath -Wl,$prefix/lib $LDFLAGS";;
    esac;;
esac
export PATH CPPFLAGS LDFLAGS

dromozoa_require() {
  printf "checking version of $1..."
  current_version=`dromozoa_version "$@"`
  case x$current_version in
    x) echo " not found, error"; exit 1;;
  esac
  echo " $current_version, ok"
}

check=false
dromozoa_check() {
  package_version=$1
  shift
  printf "checking version of $1..."
  current_version=`dromozoa_version "$@"`
  case x$current_version in
    x) current_version="not found";;
  esac
  case x$current_version in
    x$package_version)
      echo " $current_version, skip"
      check=true;;
    *)
      echo " $current_version, install"
      check=false;;
  esac
}

dromozoa_curl() {
  echo "fetching $1..."
  case x$insecure in
    xtrue) curl -fkLO "$1";;
    *) curl -fLO "$1";;
  esac
}

dromozoa_prepare() {
  dromozoa_curl "$1"
  filename=`dromozoa_basename "$1"`
  echo "extracting $filename..."
  case x$filename in
    x*.tar.gz) gunzip -cd "$filename" | tar xf -;;
  esac
  case x$2 in
    x) dirname=`expr "x$filename" : 'x\(.*\)\.tar'`;;
    *) dirname=$2;;
  esac
  echo "building in $dirname..."
  cd "$dirname"
  pwd
}

dromozoa_build() {
  ./configure --prefix="$prefix" "$@"
  make
  make install
}

dromozoa_package_gnu() {
  package=$1
  package_version=$2
  package_url=https://ftp.gnu.org/gnu/$package/$package-$package_version.tar.gz
  dromozoa_check "$package_version" "$package" --version
  case x$check in
    xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  dromozoa_build
}

dromozoa_package_lua() {
  autotoolize_version=1.2
  package=$1
  package_version=$2
  package_url="https://dromozoa.s3.amazonaws.com/pub/dromozoa-autotoolize/$autotoolize_version/lua-$package_version.dromozoa-autotoolize-$autotoolize_version.tar.gz"
  dromozoa_check "$package_version" lua -v
  case x$check in
    xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  dromozoa_build
}

dromozoa_package_lua51() {
  dromozoa_package_lua "$@"
}

dromozoa_package_lua52() {
  dromozoa_package_lua "$@"
}

dromozoa_package_lua53() {
  dromozoa_package_lua "$@"
}

dromozoa_package_luajit() {
  package=$1
  package_version=$2
  package_url="https://luajit.org/download/LuaJIT-$package_version.tar.gz"
  dromozoa_check "$package_version" luajit -v
  case x$check in
    xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  make PREFIX="$prefix"
  make PREFIX="$prefix" install
}

dromozoa_package_luarocks() {
  package=$1
  package_version=$2
  package_url=https://luarocks.github.io/luarocks/releases/luarocks-$package_version.tar.gz
  dromozoa_check "$package_version" luarocks --version
  case x$check in
    xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  if test -x "$prefix/bin/lua"
  then
    ./configure --prefix="$prefix" --with-lua="$prefix"
  else
    ./configure --prefix="$prefix"
  fi
  make bootstrap
}

dromozoa_package_vim() {
  package=$1
  package_version=$2
  package_url=https://github.com/vim/vim/archive/v$package_version.tar.gz
  dromozoa_check "$package_version" vim --version
  case x$check in
    xtrue) return;;
  esac
  dromozoa_prepare "$package_url" "vim-$package_version"

  lua=`dromozoa_search luajit lua`
  case x$lua in
    x)
      enable_luainterp=--enable-luainterp=no
      with_lua_prefix=--without-lua-prefix;;
    *)
      lua_prefix=`dromozoa_dirname "$lua"`
      lua_prefix=`expr "x$lua_prefix" : 'x\(.*\)/bin$' '|' "x$lua_prefix" : 'x\(.*\)'`
      enable_luainterp=--enable-luainterp=yes
      with_lua_prefix="--with-lua-prefix=$lua_prefix"
      case x$CFLAGS in
        x) CFLAGS="-std=gnu99";;
        *) CFLAGS="-std=gnu99 $CFLAGS";;
      esac
      case x`uname` in
        xDarwin) ;;
        *) LDFLAGS="-Wl,-rpath -Wl,$lua_prefix/lib $LDFLAGS";;
      esac
      export CFLAGS LDFLAGS;;
  esac
  case x$lua in
    */luajit) with_luajit=--with-luajit;;
    *) with_luajit=--without-luajit;;
  esac

  dromozoa_build \
      "$enable_luainterp" \
      --enable-multibyte \
      --enable-gui=no \
      --with-features=huge \
      "$with_lua_prefix" \
      "$with_luajit" \
      --enable-fail-if-missing
}

dromozoa_package_autoconf() {
  dromozoa_require m4 --version
  dromozoa_require perl --version
  dromozoa_package_gnu "$@"
}

dromozoa_package_automake() {
  dromozoa_require perl --version
  dromozoa_package_gnu "$@"
}

dromozoa_package_libtool() {
  dromozoa_package_gnu "$@"
}

dromozoa_package_screen() {
  package=$1
  package_version=$2
  package_url=https://ftp.gnu.org/gnu/$package/$package-$package_version.tar.gz
  patch_url=https://github.com/dromozoa/dromozoa-boot/raw/master/$package-$package_version.patch
  dromozoa_check "$package_version" screen --version
  case x$check in
    xtrue) return;;
  esac
  dromozoa_curl "$patch_url"
  patch_filename=`dromozoa_basename "$patch_url"`
  dromozoa_prepare "$package_url"
  patch -p1 <"../$patch_filename"
  dromozoa_build --enable-colors256
}

dromozoa_package_tig() {
  dromozoa_require git --version
  package=$1
  package_version=$2
  package_url=https://github.com/jonas/tig/releases/download/tig-$package_version/tig-$package_version.tar.gz
  dromozoa_check "$package_version" tig --version
  case x$check in
    xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  dromozoa_build
}

dromozoa_package_zeromq() {
  package=$1
  package_version=$2
  package_url=https://github.com/zeromq/libzmq/releases/download/v$package_version/zeromq-$package_version.tar.gz
  dromozoa_check "$package_version" zeromq
  case x$check in
    xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  dromozoa_build
}

case x$TMPDIR in
  x) TMPDIR=/tmp;;
esac
tmp=`(umask 077 && mktemp -d "$TMPDIR/dromozoa-XXXXXX" 2>/dev/null || :)`
case x$tmp in
  x) tmp=$TMPDIR/dromozoa-$$-$RANDOM; (umask 077 && mkdir "$tmp");;
esac
cd "$tmp"
tmp=`pwd`
trap "(cd / && rm -fr '$tmp')" 0

for package in "$@"
do
  cd "$tmp"
  package_version=`"dromozoa_package_version_$package"`
  "dromozoa_package_$package" "$package" "$package_version"
done

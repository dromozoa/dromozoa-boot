#! /bin/sh -e

# Copyright (C) 2016-2021 Tomoyuki Fujimori <moyu@dromozoa.com>
#
# This file is part of dromozoa-boot.
#
# dromozoa-boot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# dromozoa-boot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with dromozoa-boot.  If not, see <http://www.gnu.org/licenses/>.

if (unset CDPATH) >/dev/null 2>&1
then
  unset CDPATH
fi

LANG=C
LC_ALL=C
export LANG LC_ALL

dromozoa_package_version_lua51() {
  echo 5.1.5
}

dromozoa_package_version_lua52() {
  echo 5.2.4
}

dromozoa_package_version_lua53() {
  echo 5.3.6
}

dromozoa_package_version_lua54() {
  echo 5.4.3
}

dromozoa_package_version_luajit() {
  echo 2.0.5
}

dromozoa_package_version_luarocks() {
  echo 3.7.0
}

dromozoa_package_version_vim() {
  echo 8.2.2918
}

dromozoa_package_version_m4() {
  echo 1.4.19
}

dromozoa_package_version_autoconf() {
  echo 2.71
}

dromozoa_package_version_automake() {
  echo 1.16.3
}

dromozoa_package_version_libtool() {
  echo 2.4.6
}

dromozoa_package_version_screen() {
  echo 4.8.0
}

dromozoa_package_version_tig() {
  echo 2.5.3
}

dromozoa_package_version_zeromq() {
  echo 4.3.4
}

dromozoa_package_version_libjpeg() {
  echo 9d
}

dromozoa_package_version_libpng() {
  echo 1.6.37
}

dromozoa_package_version_hook() {
  echo 1.11
}

command=install
insecure=false
prefix=
while :
do
  case X$# in
    X0) break;;
  esac
  case X$1 in
    X-help|X-hel|X-he|X-h|X--help|X--hel|X--he|X--h)
      shift; command=help;;
    X-list|X-lis|X-li|X-l|X--list|X--lis|X--li|X--l)
      shift; command=list;;
    X-k|X--insecure)
      shift; insecure=true;;
    X-prefix|X-prefi|X-pref|X-pre|X-pr|X-p|X--prefix|X--prefi|X--pref|X--pre|X--pr|X--p)
      case X$# in
        X1) echo "missing argument to $1" >&2; exit 1;;
      esac
      shift; prefix=$1; shift;;
    X--prefix=*|X--prefi=*|X--pref=*|X--pre=*|X--pr=*|X--p=*)
      prefix=`expr "X$1" : 'X--p[^=]*\(=.*\)' | sed 's/^.//'`
      shift;;
    X--)
      shift; break;;
    X-*)
      echo "unrecognized option $1" >&2; exit 1;;
    *)
      break;;
  esac
done

case X$command in
  Xhelp)
    cat <<EOH
$0 --help
$0 --list
$0 [--insecure] --prefix=PREFIX PACKAGE...
EOH
    exit;;
  Xlist)
    for package in lua51 lua52 lua53 lua54 luajit luarocks vim m4 autoconf automake libtool screen tig zeromq libjpeg libpng hook
    do
      package_version=`"dromozoa_package_version_$package"`
      echo "$package $package_version"
    done
    exit;;
esac

case X$prefix in
  X) echo "prefix is unset or null" >&2; exit 1;;
esac
mkdir -p "$prefix"
prefix=`(cd "$prefix" && pwd)`

case X$PATH in
  X) PATH=$prefix/bin:/usr/bin:/bin:/usr/sbin:/sbin;;
  *) PATH=$prefix/bin:$PATH;;
esac
case X$CPPFLAGS in
  X) CPPFLAGS="-I$prefix/include";;
  *) CPPFLAGS="-I$prefix/include $CPPFLAGS";;
esac
case X`uname` in
  XDarwin)
    case X$LDFLAGS in
      X) LDFLAGS="-L$prefix/lib";;
      *) LDFLAGS="-L$prefix/lib $LDFLAGS";;
    esac;;
  *)
    case X$LDFLAGS in
      X) LDFLAGS="-L$prefix/lib -Wl,-rpath -Wl,$prefix/lib";;
      *) LDFLAGS="-L$prefix/lib -Wl,-rpath -Wl,$prefix/lib $LDFLAGS";;
    esac;;
esac
export PATH CPPFLAGS LDFLAGS

dromozoa_basename() {
  expr  "X$1" : 'X.*\(/[^/][^/]*\)/*$' \
    '|' "X$1" : '\(X//\)$' \
    '|' "X$1" : '\(X/\)' \
    '|' "X$1" | sed 's/^.//'
}

dromozoa_dirname() {
  expr  "X$1" : '\(X.*[^/]\)//*[^/][^/]*/*$' \
    '|' "X$1" : '\(X//\)[^/]' \
    '|' "X$1" : '\(X//\)$' \
    '|' "X$1" : '\(X/\)' \
    '|' X. | sed 's/^.//'
}

dromozoa_search() {
  path=:$PATH
  while :
  do
    i=`expr "X$path" : 'X\(:[^:]*\)' | sed 's/^.//'`
    case X$i in
      X) i=.;;
    esac
    for j in "$@"
    do
      if test -x "$i/$j"
      then
        i=`(cd "$i" && pwd)`
        echo "$i/$j"
        return
      fi
    done
    path=`expr "X$path" : 'X:[^:]*\(:.*\)' '|' X`
    case X$path in
      XX) return;;
    esac
  done
}

dromozoa_version_lua() {
  name=_dromozoa_version_lua
  cat <<EOH >"$name.c"
#include <stdio.h>
#include <string.h>
#include <lua.h>

int main(int ac, char* av[]) {
  const char* p = LUA_RELEASE;
  if (p && strncmp(p, "Lua ", 4) == 0) {
    printf("%s\n", p + 4);
  }
  return 0;
}
EOH
  if gcc $CPPFLAGS $LDFLAGS -g -O2 "$name.c" -llua -o "$name" >/dev/null 2>&1
  then
    "./$name"
  fi
}

dromozoa_version_zeromq() {
  name=_dromozoa_version_zeromq
  cat <<EOH >"$name.c"
#include <stdio.h>
#include <zmq.h>

int main(int ac, char* av[]) {
  int major = 0;
  int minor = 0;
  int patch = 0;
  zmq_version(&major, &minor, &patch);
  printf("%d.%d.%d\n", major, minor, patch);
  return 0;
}
EOH
  if gcc $CPPFLAGS $LDFLAGS -g -O2 "$name.c" -lzmq -o "$name" >/dev/null 2>&1
  then
    "./$name"
  fi
}

dromozoa_version_libjpeg() {
  name=_dromozoa_version_libjpeg
  cat <<EOH >"$name.c"
#include <stdio.h>
#include <jpeglib.h>

int main(int ac, char* av[]) {
#ifndef LIBJPEG_TURBO_VERSION
#if defined(JPEG_LIB_VERSION_MAJOR) && defined(JPEG_LIB_VERSION_MINOR)
  int major = JPEG_LIB_VERSION_MAJOR;
  int minor = JPEG_LIB_VERSION_MINOR;
#else
  int major = JPEG_LIB_VERSION / 10;
  int minor = JPEG_LIB_VERSION % 10;
#endif
  if (minor == 0) {
    printf("%d\n", major);
  } else {
    printf("%d%c\n", major, 'a' + minor - 1);
  }
#endif
  return 0;
}
EOH
  if gcc $CPPFLAGS $LDFLAGS -g -O2 "$name.c" -ljpeg -o "$name" >/dev/null 2>&1
  then
    "./$name"
  fi
}

dromozoa_version_libpng() {
  name=_dromozoa_version_libpng
  cat <<EOH >"$name.c"
#include <stdio.h>
#include <png.h>

int main(int ac, char* av[]) {
  printf("%s\n", PNG_LIBPNG_VER_STRING);
  return 0;
}
EOH
  if gcc $CPPFLAGS $LDFLAGS -g -O2 "$name.c" -lpng -o "$name" >/dev/null 2>&1
  then
    "./$name"
  fi
}

dromozoa_version() {
  case X$1 in
    Xlua)
      dromozoa_version_lua;;
    Xscreen)
      result=`"$@" 2>&1 || :`
      major=`expr "X$result" : 'X.* version\( [0-9][0-9]*\)' | sed 's/^.0*//'`
      minor=`expr "X$result" : 'X.* version [0-9][0-9]*\(\.[0-9][0-9]*\)' | sed 's/^.0*//'`
      patch=`expr "X$result" : 'X.* version [0-9][0-9]*\.[0-9][0-9]*\(\.[0-9][0-9]*\)' | sed 's/^.0*//'`
      case X$major in
        X) ;;
        *) printf '%d.%d.%d' "$major" "$minor" "$patch";;
      esac;;
    Xvim)
      if "$@" >_dromozoa_version_vim 2>&1
      then
        result=`sed -n 1p <_dromozoa_version_vim`
        version=`expr "X$result" : 'X.*\( [0-9][0-9]*\.[0-9][0-9.]*\)' | sed 's/^.//'`
        result=`sed -n '/^Included patches:/p' <_dromozoa_version_vim`
        patch=`expr "X$result" : 'X.*\([^0-9][0-9][0-9]*\)$' | sed 's/^.//'`
        case X$patch in
          X) printf '%s' "$version";;
          *) printf '%s.%04d' "$version" "$patch";;
        esac
      fi;;
    Xtig)
      if "$@" >"_dromozoa_version_tig" 2>&1
      then
        result=`cat "_dromozoa_version_tig"`
        result=`expr "X$result" : 'Xtig version\( [0-9][0-9]*\.[0-9][0-9.]*\)' | sed 's/^.//'`
        echo "$result"
      fi;;
    Xzeromq)
      dromozoa_version_zeromq;;
    Xlibjpeg)
      dromozoa_version_libjpeg;;
    Xlibpng)
      dromozoa_version_libpng;;
    Xdromozoa-hook-version)
      "$@" 2>/dev/null || :;;
    *)
      if "$@" >"_dromozoa_version_$1" 2>&1
      then
        result=`cat "_dromozoa_version_$1"`
        result=`expr "X$result" : 'X.*\([ v][0-9][0-9]*\.[0-9][0-9.]*\)' | sed 's/^.//'`
        echo "$result"
      fi;;
  esac
}

dromozoa_require() {
  printf "checking version of $1..."
  current_version=`dromozoa_version "$@"`
  case X$current_version in
    X) echo " not found, error"; exit 1;;
  esac
  echo " $current_version, ok"
}

check=false
dromozoa_check() {
  package_version=$1
  shift
  printf "checking version of $1..."
  current_version=`dromozoa_version "$@"`
  case X$current_version in
    X) current_version="not found";;
  esac
  if test "X$current_version" = "X$package_version"
  then
    echo " $current_version, skip"
    check=true
  else
    echo " $current_version, install"
    check=false
  fi
}

dromozoa_curl() {
  echo "fetching $1..."
  case X$insecure in
    Xtrue) curl -fkLO "$1";;
    *) curl -fLO "$1";;
  esac
}

dromozoa_prepare() {
  dromozoa_curl "$1"
  filename=`dromozoa_basename "$1"`
  echo "extracting $filename..."
  case X$filename in
    X*.tar.gz) gunzip -cd "$filename" | tar xf -;;
    *) echo "could not extract $filename" >&2; exit 1;;
  esac
  case X$2 in
    X) dirname=`expr "X$filename" : '\(X.*\)\.tar' | sed 's/^.//'`;;
    *) dirname=$2;;
  esac
  echo "building in $dirname..."
  cd "$dirname"
  pwd
}

dromozoa_build() {
  ./configure --prefix="$prefix" "$@"
  make
  make install
}

dromozoa_package_gnu() {
  package=$1
  package_version=$2
  package_url=https://ftp.gnu.org/gnu/$package/$package-$package_version.tar.gz
  dromozoa_check "$package_version" "$package" --version
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  dromozoa_build
}

dromozoa_package_lua() {
  autotoolize_version=1.3
  package=$1
  package_version=$2
  package_url="https://dromozoa.s3.amazonaws.com/pub/dromozoa-autotoolize/$autotoolize_version/lua-$package_version.dromozoa-autotoolize-$autotoolize_version.tar.gz"
  dromozoa_check "$package_version" lua
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  dromozoa_build
}

dromozoa_package_lua51() {
  dromozoa_package_lua "$@"
}

dromozoa_package_lua52() {
  dromozoa_package_lua "$@"
}

dromozoa_package_lua53() {
  dromozoa_package_lua "$@"
}

dromozoa_package_lua54() {
  dromozoa_package_lua "$@"
}

dromozoa_package_luajit() {
  package=$1
  package_version=$2
  package_url="https://luajit.org/download/LuaJIT-$package_version.tar.gz"
  dromozoa_check "$package_version" luajit -v
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  make PREFIX="$prefix"
  make PREFIX="$prefix" install
}

dromozoa_package_luarocks() {
  dromozoa_require lua
  package=$1
  package_version=$2
  package_url=https://luarocks.github.io/luarocks/releases/$package-$package_version.tar.gz
  dromozoa_check "$package_version" luarocks --version
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  lua=`dromozoa_search lua`
  lua_prefix=`dromozoa_dirname "$lua"`
  lua_prefix=`expr "X$lua_prefix" : '\(X.*\)/bin$' '|' "X$lua_prefix" | sed 's/^.//'`
  ./configure --prefix="$prefix" --with-lua="$lua_prefix"
  make
  make install
}

dromozoa_package_vim() {
  package=$1
  package_version=$2
  package_url=https://github.com/vim/vim/archive/v$package_version.tar.gz
  dromozoa_check "$package_version" vim --version
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_prepare "$package_url" "vim-$package_version"

  enable_luainterp=--enable-luainterp=no
  with_lua_prefix=--without-lua-prefix
  with_luajit=--without-luajit

  lua=`dromozoa_search luajit lua`
  case X$lua in
    X) ;;
    *)
      lua_prefix=`dromozoa_dirname "$lua"`
      lua_prefix=`expr "X$lua_prefix" : '\(X.*\)/bin$' '|' "X$lua_prefix" | sed 's/^.//'`
      enable_luainterp=--enable-luainterp=yes
      with_lua_prefix=--with-lua-prefix=$lua_prefix
      case X$lua in
        */luajit) with_luajit=--with-luajit;;
      esac
      case X$CFLAGS in
        X) CFLAGS="-std=gnu99";;
        *) CFLAGS="-std=gnu99 $CFLAGS";;
      esac
      case X`uname` in
        XDarwin) ;;
        *) LDFLAGS="-Wl,-rpath -Wl,$lua_prefix/lib $LDFLAGS";;
      esac
      export CFLAGS LDFLAGS;;
  esac

  dromozoa_build \
      "$enable_luainterp" \
      --enable-multibyte \
      --enable-gui=no \
      --with-features=huge \
      "$with_lua_prefix" \
      "$with_luajit" \
      --enable-fail-if-missing
}

dromozoa_package_m4() {
  dromozoa_package_gnu "$@"
}

dromozoa_package_autoconf() {
  dromozoa_require m4 --version
  dromozoa_require perl --version
  dromozoa_package_gnu "$@"
}

dromozoa_package_automake() {
  dromozoa_require perl --version
  dromozoa_package_gnu "$@"
}

dromozoa_package_libtool() {
  dromozoa_package_gnu "$@"
}

dromozoa_package_screen() {
  package=$1
  package_version=$2
  package_url=https://ftp.gnu.org/gnu/$package/$package-$package_version.tar.gz
  patch_url=https://github.com/dromozoa/dromozoa-boot/raw/master/$package-$package_version.patch
  dromozoa_check "$package_version" screen --version
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_curl "$patch_url"
  patch_filename=`dromozoa_basename "$patch_url"`
  dromozoa_prepare "$package_url"
  patch -p1 <"../$patch_filename"
  dromozoa_build --enable-colors256
}

dromozoa_package_tig() {
  dromozoa_require git --version
  package=$1
  package_version=$2
  package_url=https://github.com/jonas/tig/releases/download/tig-$package_version/tig-$package_version.tar.gz
  dromozoa_check "$package_version" tig --version
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  dromozoa_build
}

dromozoa_package_zeromq() {
  package=$1
  package_version=$2
  package_url=https://github.com/zeromq/libzmq/releases/download/v$package_version/zeromq-$package_version.tar.gz
  dromozoa_check "$package_version" zeromq
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  dromozoa_build
}

dromozoa_package_libjpeg() {
  package=$1
  package_version=$2
  package_url=http://www.ijg.org/files/jpegsrc.v$package_version.tar.gz
  dromozoa_check "$package_version" libjpeg
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_prepare "$package_url" "jpeg-$package_version"
  dromozoa_build
}

dromozoa_package_libpng() {
  package=$1
  package_version=$2
  package_url=https://jaist.dl.sourceforge.net/project/libpng/libpng16/$package_version/libpng-$package_version.tar.gz
  dromozoa_check "$package_version" libpng
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  dromozoa_build
}

dromozoa_package_hook() {
  package=$1
  package_version=$2
  package_url=https://github.com/dromozoa/dromozoa-hook/releases/download/v$package_version/dromozoa-hook-$package_version.tar.gz
  dromozoa_check "$package_version" dromozoa-hook-version
  case X$check in
    Xtrue) return;;
  esac
  dromozoa_prepare "$package_url"
  dromozoa_build
}

case X$TMPDIR in
  X) TMPDIR=/tmp;;
esac
tmp=`(umask 077 && mktemp -d "$TMPDIR/dromozoa-XXXXXX" 2>/dev/null || :)`
case X$tmp in
  X) tmp=$TMPDIR/dromozoa-$$-$RANDOM; (umask 077 && mkdir "$tmp");;
esac
cd "$tmp"
tmp=`pwd`
trap "(cd / && rm -fr '$tmp')" 0

for package in "$@"
do
  cd "$tmp"
  package_version=`"dromozoa_package_version_$package"`
  "dromozoa_package_$package" "$package" "$package_version"
done
